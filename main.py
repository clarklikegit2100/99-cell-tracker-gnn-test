# -*- coding: utf-8 -*-
"""good-GNN-Microscopy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KUyiHCQarK1erP_pIcgCWboSOIMGZNOI

# **This Notebook is provided Training Example (PhC-C2DH-U373 Dataset) Using Colab**
The notebook arragemnet is as follow

*   **Prequesities**
  1.   Conect to github, Clone the repository
  2.   Configurate working directory and google drive connetction
  3.   Download and install Conda, create conda enviroment with all the required packages

*   **Trainings**
  1.   Run feature extraction for metric learning
  2.   Run metric learning training
  3.   Run compreensive feature extraction with metric learning
  4.   Run Cell Tracking training

*   **Inference**

# **Prequesities**

# 1. Conect to github, Clone the repository
"""

import os

# ! git clone https://github.com/talbenha/cell-tracker-gnn
#
# curr_workdir = f'./cell-tracker-gnn'
# if os.path.exists(curr_workdir):
#   os.chdir(curr_workdir)

"""# 2. Configurate working directory and google drive connetction

"""

# import os
# from google.colab import drive
# drive.mount('/content/drive', force_remount=True)
# file_path = '/content/drive/My Drive/CellTracking/nature_method_ctc/' # TODO: update this path
# if os.path.exists(file_path):
#   os.listdir(file_path)
# else:
#   print("Error Path doesn't exist")

"""# 3. Download and install Conda, create conda enviroment with all the required packages"""

################################################################################
# INSTALL CONDA ON GOOGLE COLAB
################################################################################

# try to run the bare minimum to get a new conda env working
# env_name = 'cell-tracking-challenge'
# conda_path = ''
# try:
#     conda_path = ! which conda
# finally:
#     print('')
#
# if (len(conda_path) == 0):
#     print('installing miniconda')
#     ! wget https://repo.anaconda.com/miniconda/Miniconda3-py37_4.8.2-Linux-x86_64.sh
#     ! chmod +x Miniconda3-py37_4.8.2-Linux-x86_64.sh
#     ! bash ./Miniconda3-py37_4.8.2-Linux-x86_64.sh -b -f -p /usr/local
#     import sys
#     sys.path.append('/usr/local/lib/python3.7/site-packages/')
#     ! conda init
#     ! conda install -n root _license -y -q
# else:
#     print('found miniconda')
#
# conda_envs = ! conda env list
# res = [i for i in conda_envs if env_name in i]
# if (len(res) == 0):
#     print(f'not found {env_name} env', len(res))
#     ! conda create --name cell-tracking-challenge-mac310 --file requirements-conda.txt
# else:
#     print(f'found {env_name} env', len(res))
# print(f'{env_name} was created')
#
# # Commented out IPython magic to ensure Python compatibility.
# # %%bash
# # source activate cell-tracking-challenge
# # # install other requirements
# # pip install -r requirements.txt
# # pip install PyYAML==5.4.1
#
# !pip install python-dotenv
# import dotenv

"""# **Training**
 The first two stages can be skipped (step #2 is long in colab) by using the pre-trained model (in step #3) provided under the [releases](https://github.com/talbenha/cell-tracker-gnn/releases) of the repository. For example for the pretrained model for PhC-C2DH-U373 dataset, download the software and find the model under `software/parameters/Features_Models/PhC-C2DH-U373/all_params.pth`

# 1. Run feature extraction for metric learning
"""

# %%bash
# #source activate cell-tracking-challenge
#export FOLDER_PATH=/content/drive/MyDrive/CellTracking/nature_method_ctc # TODO: update this path
'''
export HYDRA_FULL_ERROR=1
export FOLDER_PATH= C:/Users/jzhao16/Documents/mydata/gnntest
export DATA_NAME=PhC-C2DH-U373 # TODO: update this path
python run_feat_extract.py params.input_images="${FOLDER_PATH}/${DATA_NAME}" params.input_masks="${FOLDER_PATH}/${DATA_NAME}" params.input_seg="${FOLDER_PATH}/${DATA_NAME}" params.output_csv="${FOLDER_PATH}/basic_features" params.sequences=['01','02']  params.seg_dir='_GT/TRA' params.basic=True

'''

# Section 1
import os
import sys
from subprocess import run

# Set environment variables
os.environ["HYDRA_FULL_ERROR"] = "1"
FOLDER_PATH = "C:/Users/jzhao16/Documents/mydata/gnntest"
DATA_NAME = "PhC-C2DH-U373"
os.environ["FOLDER_PATH"] = FOLDER_PATH
os.environ["DATA_NAME"] = DATA_NAME

# Prepare CLI-style overrides for Hydra
args = [
    "run_feat_extract.py",
    f"params.input_images={FOLDER_PATH}/{DATA_NAME}",
    f"params.input_masks={FOLDER_PATH}/{DATA_NAME}",
    f"params.input_seg={FOLDER_PATH}/{DATA_NAME}",
    f"params.output_csv={FOLDER_PATH}/basic_features",
    "params.sequences=['01','02']",
    "params.seg_dir=_GT/TRA",
    "params.basic=True"
]

# Run the script as a subprocess (with args)
run(["python"] + args)



#
# import os
#
# # Enable full Hydra error reporting
# os.environ['HYDRA_FULL_ERROR'] = '1'
# # Set the dataset root path
# os.environ['FOLDER_PATH'] = '/content/drive/MyDrive/CellTracking/nature_method_ctc'
# # Set the dataset name
# os.environ['DATA_NAME'] = 'PhC-C2DH-U373'


"""# 2. Run metric learning training
 Pay attention that this cell takes long time on google colab, so you can skip this stage and use the pre-trained model provided under the [releases](https://github.com/talbenha/cell-tracker-gnn/releases) of the repository. For example for the pretrained model for PhC-C2DH-U373 dataset, download the software and find the model under `software/parameters/Features_Models/PhC-C2DH-U373/all_params.pth`
"""

#%%bash
#source activate cell-tracking-challenge
#export FOLDER_PATH=/content/drive/MyDrive/CellTracking/nature_method_ctc # TODO: update this path
'''
export HYDRA_FULL_ERROR=1
export FOLDER_PATH= C:/Users/jzhao16/Documents/mydata/gnntest
export DATA_NAME=PhC-C2DH-U373 # TODO: update this path
python run_train_metric_learning.py dataset.kwargs.data_dir_img="${FOLDER_PATH}/${DATA_NAME}" dataset.kwargs.data_dir_mask="${FOLDER_PATH}/${DATA_NAME}" dataset.kwargs.dir_csv="${FOLDER_PATH}/basic_features/${DATA_NAME}" dataset.kwargs.subdir_mask='GT/TRA'
'''

import os
from subprocess import run

# Set environment variables
os.environ["HYDRA_FULL_ERROR"] = "1"
FOLDER_PATH = "C:/Users/jzhao16/Documents/mydata/gnntest"
DATA_NAME = "PhC-C2DH-U373"
os.environ["FOLDER_PATH"] = FOLDER_PATH
os.environ["DATA_NAME"] = DATA_NAME

# Build command-line arguments for Hydra
args = [
    "run_train_metric_learning.py",
    f'dataset.kwargs.data_dir_img={FOLDER_PATH}/{DATA_NAME}',
    f'dataset.kwargs.data_dir_mask={FOLDER_PATH}/{DATA_NAME}',
    f'dataset.kwargs.dir_csv={FOLDER_PATH}/basic_features/{DATA_NAME}',
    "dataset.kwargs.subdir_mask=GT/TRA"
]

# Execute the training script with Hydra overrides
run(["python"] + args)

"""--> output 'all_params.pth' is generated at end, it is the input_model (i.e. for METRIC_PATH variable) for the next step

# **3. Run compreensive feature extraction with metric learning**
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# source activate cell-tracking-challenge
# export HYDRA_FULL_ERROR=1
# export FOLDER_PATH=/content/drive/MyDrive/CellTracking/nature_method_ctc # TODO: update this path
# export METRIC_PATH=/content/drive/MyDrive/CellTracking/nature_method_ctc/software/parameters/Features_Models/PhC-C2DH-U373/all_params.pth # TODO: update this path
# export DATA_NAME=PhC-C2DH-U373 # TODO: update this path
# 
# python run_feat_extract.py params.input_images="${FOLDER_PATH}/${DATA_NAME}" params.input_masks="${FOLDER_PATH}/${DATA_NAME}" params.input_seg="${FOLDER_PATH}/${DATA_NAME}" params.output_csv="${FOLDER_PATH}/ct_features/" params.sequences=['01','02']  params.seg_dir='_GT/TRA' params.basic=False params.input_model="${METRIC_PATH}"

"""# 4. Run Cell Tracking training"""

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# source activate cell-tracking-challenge
# export HYDRA_FULL_ERROR=1
# export FOLDER_PATH=/content/drive/MyDrive/CellTracking/nature_method_ctc # TODO: update this path
# export DATA_NAME=PhC-C2DH-U373 # TODO: update this path
# # cell tracking training run
# python run.py datamodule.dataset_params.main_path="${FOLDER_PATH}/ct_features/${DATA_NAME}" datamodule.dataset_params.exp_name="2D_SIM" datamodule.dataset_params.drop_feat=[]

# # **Inference**
# Update the following variables:
#
#
# *   MODEL_PYTORCH_LIGHTNING - according to the output of the previius cell
# *   MODEL_METRIC_LEARNING
# *   FOLDER_PATH - path to folder that contains the dataset
# *   MODALITY
#


# Commented out IPython magic to ensure Python compatibility.
# %%bash
# source activate cell-tracking-challenge
# export SEQUENCE=01 # sequence number
# export FOLDER_PATH=/content/drive/MyDrive/CellTracking/nature_method_ctc # TODO: update this path
# export MODEL_METRIC_LEARNING=/content/drive/MyDrive/CellTracking/nature_method_ctc/software/parameters/Features_Models/PhC-C2DH-U373/all_params.pth # TODO: update this path
# export MODEL_PYTORCH_LIGHTNING='/content/cell-tracker-gnn/logs/runs/2022-07-16/19-37-07/checkpoints/epoch=37.ckpt'
# export DATA_NAME=PhC-C2DH-U373 # TODO: update this path
# export MODALITY="2D"  # dataset modality
# 
# export DATASET="${FOLDER_PATH}/${DATA_NAME}"
# export CODE_TRA=src/inference/
# export PYTHONPATH=/content/cell-tracker-gnn
# 
# # our model needs CSVs, so let's create from image and segmentation.
# python ${CODE_TRA}/preprocess_seq2graph_clean.py -cs 20 -ii "${DATASET}/${SEQUENCE}" -iseg "${DATASET}/${SEQUENCE}_GT/TRA" -im "${MODEL_METRIC_LEARNING}" -oc "${DATASET}/${SEQUENCE}_CSV"
# 
# # run the prediction
# python ${CODE_TRA}/inference_clean.py -mp "${MODEL_PYTORCH_LIGHTNING}" -ns "${SEQUENCE}" -oc "${DATASET}"
# 
# # create label maps
# python ${CODE_TRA}/postprocess_clean.py -modality "${MODALITY}" -iseg "${DATASET}/${SEQUENCE}_GT/TRA" -oi "${DATASET}/${SEQUENCE}_RES_inference"
#